# -*- coding: utf-8 -*-
"""nmproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nXWaDrGpaczAVLyFb6BxUlb81F1W-8Mx
"""

df =pd.read_csv("/content/Churn_Modelling.csv")
df.head()

data.info()

#checking for null values
data.TotalCharges=pd.to_numeric(data.TotalCharges,errors='coerce')
data.isnull().any()



data["TotalCharges"].fillna(data["TotalCharges"].median() , inplace = True)
data.isnull().sum()

# Commented out IPython magic to ensure Python compatibility.
#import necessary libraries
import pandas as pd
import numpy as np
import pickle 
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import sklearn
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score

from pandas.core.sorting import lexsort_indexer
from sklearn.prepocessing import LabelEncoder
le = LabelEncoder()
data["gender"] = le.fit_transform(data["gender"])
data["partner"] = le.fit_transform(data["partner"])
data["Dependents"] = le.fit_transform(data["Dependents"])
data["PhoneService"] = le.fit_transform(data["PhoneService"])
data["MultipleLines"] = le.fit_transform(data["MultipleLines"])
data["InternetService"] =le.fit_transform(data["InternetService"])
data["OnlineSecurity"] = le.fit_transform(data["OnlineSecurity"])
data["OnlineBackup"] = le.fit_transform(data["OnlineBackup"])
data["DeviceProtection"] = le.fit_transform(data["DeviceProtection"])
data["TechSuport"] = le.fit_transform(data["TechSuport"])
data["StreamingTV"] = le.fit_transform["Straming"]
data["StreamingMovies"] = le.fit_transform["StreamingMovies"]
data["Contract"] = le.fit_transform["Contract"]
data["PaperlessBilling"] = le.fit_transfotrm["PaperlessBilling"]
data["PaymentMethod"] = le.fit_transform["PaymentMethod"]
data["Churn"] = le.fit-transform["Churn"]

data.head()

x= data.iloc[:,0.9].values
y= data.iloc[:,19:20].values

x

y

from pandas.core.tools.datetimes import DatetimeScalarOrArrayConvertible
from sklearn.preorocessing import OneHotEncoder
one = OneHotEncoder()
a= one.fit_transform(x[:,6:7]).toarray()
b= one.fit_transform(x[:,7:8]).toarray()
c=one.fit_transform(x[:,8:9]).toarray()
d=one.fit_transform(x[:,9:10]).toarray()
e=one.fit__transform(x[:,10:11).toarray()
f=one.fit_transform(x[:,11:12]).toarray()
g= one.fit_transform(x[:,12:13]).toarray()
h= one.fit_transform(x[:,13:14]).toarray()
i= one.fit_transform(x[:,14:15]).toarray()
j= one.fit_transform(x[:,16:17]).toarray()
x=np.delete(x,[6,7,8,9,10,11,12,13,14,16],axis=1)
x=np.concatenate((a,b,c,d,e,f,g,h,i,j,x),axis=1)

from implearn.over_sampling import SMOTE

data.descripe()

plt. figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.distplot(data["tenure"])
plt.subplot(1,2,2)
sns.distplot(data["MonthlyCharges"])

plt.figure(fifsize=(12,5))
plt.subplot(1,2,1)
sns.countplot(data["gender"])
plt.subplot(1,2,2)
sns.countplot(data["Dependents"])

sns.barplot(x="Churn",y="MonthlyCharges",data=data)

sns.heatmap(data.corr(),annot=Ture)

sns.pairplot(data=data,markers=["^","v"],palette="inferno")

sns.headmap(data.corr(,annot=Ture)

sns.pairplot(data=data,marker=["^","v"],palette="inferno")

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import standardscaler

#importing and bulding the Decision tree model
def longreg(x_train,x_test,y_train,y_test):
lr = LogisticRegression(random_state=0)
lr.fit(x_train,y_train)
y_lr_tr=lr.predict(x_train)
print(accuracy_score(y_lr_tr,y_train))
ypred_lr = lr.predict(x_test)
print(accuracy_score(ypred_lr,y_test))
print("***Logistic Regression***")
print("Confusion_Matrix")
print(confusion_matrix(y_test,ypred_lr))
print("Classification Report")
print(classification report(y_test,yPred_lr)

#printing the train accuracy and test accuracy respectively
logreg(x_train,x_test,y_train,y_test)

#importing and building the Decision tree model
def decisionTree(x_train,x_test,y_train,y_test):
  dtc = DecisionTreeClassifier(criterion="entropy",random_state=0)
    dtc.fit(x_train,y_train)
    y_dt_tr = dtc.predict(x_train)
    print(accuracy_score(y_dt_tr,y_train))
    yPred_dt = dtc.predict(x_test)
    print(accuracy_score(yPred_dt,y_test))
    print("***Decision Tree***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,yPred_dt))
    print("Classification Report")
    print(classification_report(y_test,yPred_dt))

#printing the train accuracy and test accuracy respectively
decisionTree(x_train,x_test,y_train,y_test)

#importing and building the random forest model
def RandomForest(x_train,x_test,y_train,y_test):
    rf = RandomForestClassifier(criterion="entropy",n_estimation=0,random_state=0)
    rf.fit(x_train,y_train)
    y_rf_tr = rf.predict(x_train)
    print(accuracy_score(y_rf_tr,y_train))
    print("***Random Forest***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,yPred_rf))
    print("Classification Report")
    print(classification_report(y_test,yPred_rf))

#printing the train accuracy and test accuracy respectively
RandomForest(x_train,x_test,y_train,y_test)

#importing and building the KNN model
def KNN(x_train,x_test,y_train,y_test):
    knn = KNeighborsClassifier()
    knn.fit(x_train,y_train)
    y_knn_tr = knn.predict(x_train)
    print(accuracy_score(y_knn_tr,y_train))
    yPred_knn = knn.predict(x_test)
    print(accuracy_score(ypred_knn,y_test))
    print("***KNN***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,ypred_knn))
    print("classification Report")
    print(classification_report(y_test,yPred_knn))

#printing the train and accuracy and test accuracy respectively
KNN(x_train,x_test,y_train,y_test)

#importing and building the random forest model
def svm(x_train,x_test,y_train,y_test):
    svm = SVC(kernel = "linear")
    svm.fit(x_train,y_train)
    y_svm_tr = svm.predict(x_train)
    print(accuracy_score(y_svm_tr,y_train))
    yPred_svm = svm.predict(x_test)
    print(accuray_score(ypred_svm,y_test))
    print("***Support vector Machine***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,yPred_svm))
    print("Classification Report")
    print(classification_report(y_test,yPred_svm))

#printing the train accuracy and test accuracy respectively
svm(x_train,x_test,y_train,y_test)

from joblib.parallel import SequentialBackend
#importing the keras libraries and packages
import kerasfrom keras.models import Sequential
from keras.layers import Dense

# Initialising the ANN
classifier = sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(units=30,activation='relu',input_dim=40))

# Adding the second hidden layer
classifier.add(Dense(units=30,activation='relu'))

# Adding the output layer
classifier.add(Dense(units=1,activation='sigmoid'))

# Compiling the ANN
classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

# Fitting the ANN to the training set
model_history=classifier.fit(x_train,y_train,batch_size=0,validation_split=0.33,,epochs=200)

#testing on random input values
lr=LogistickRegression(random_state=0)
lr.fit(x_train,y_train)
print("Predicting on random input")
lr_Pred_own = lr.predict(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print("output is:",lr_pred_own)

#testing on random input values
dtc = DecisionTreeClassifier(criterion="entropy",random_state=0)
dtc.fit(x_train,y_train)
print("predicting on random input")
dtc_pred_own = dtc.predict(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print("output is:",dtc_pred_own)

#testing on random input values
rf =RandomForestClassifier(criterion="entropy,n_estimators=0,random_state=0")
rf.fit(x_train,y_train)
print("predicting on random input")
rf_pred_own=rf.predict(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print("output is:",rf_pred_own)

#testing on random input values
svc = SVC(kernel = "linear")
svc.fit(x_train,y_train)
print("predicting on random input")
svm_pred_own = svc.predict(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print("output is:",svm_pred_own)

#testing on random input values
knn = KNeighboursClassifier()
knn.fit(x_train,y_train)
print("predicting on random input")
knn_pred_own = knn.predicy(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print("output is:",knn_pred_own)

#testing on random input values
print("predicting on the random input")
ann_pred_own = classifier.predict(sc.transform([0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,456,1,0,3245,4567]))
print(ann_pred_own)
ann_pred_own = (ann_pred_own>0.5)
print("output is:",ann_pred_own)

def compareModel(x_train,x_test,y_train,y_test):
  logreg(x_train,x_test,y_train,y_test)
  print('-'*100)
  descisionTree(x-train,x_test,y_train,y_test)
  print('-'*100)
  RandomForest(x_train,x_test,y_train,y_test)
  print('-'*100)
  svm(x_train,x_test,y_train,y_test)
  print('-'*100)
  KNN(x_train,x_test,y_train,y_test)
  print('-'*100)

classifier.save("telcom_churn.h5")

from flask import Flask,render_template,request
import keras
from keras.models import load_model

app =flask(__name__)
model = load_model("telcom_churn.h5")

@app.route('/') # rendering the html template
def home():
   return render_template('home.html')

@app.route('/')
def helloworld():
  return render_template("base.html")
  @app.route('assesment')
  def prediction():
    return render_template("index.html")
    @app.route('/predict',methods =['POST'])
    def admin():
      a= request.form["gende"]
      if(a== 'f'):
       a=0
       if(a== 'm'):
       b= request.form["srcitizen"]
       if (b== 'n'):
       b=0
       if (b== 'y'):
       b=1
       c= request.form["partner"]
       if (c== 'n'):
         c=0
      if(c=='y'):
        c=1
      d= request.form["dependents"]
      if (d=='n'):
        d=0
      if (d=='y'):
        d=1
      e= request.form["tenure"]
      f= request.form["phservices"]
      if (f== 'n'):
        f=0
      if (== 'y'):
        f=1
        g= request.form["multi"]
        if (g== 'n'):
        g1,g2,g3=1,0,0
        if (g== 'y'):
          g1,g2,g3=0,0,1
      h= request.form["is"]
      if (h== 'dsl'):
        h1,h2,h3=1,0,0 
        if (h== 'fo')
        h1,h2,h3=0,1,0
        if(h== 'n'):
        h1,h2,h3=0,0,1 
      i= request.form["os"]
      if(i== 'n'):
        i1,i2,i3=1,0,0
      if (i== 'nis'):
        i1,i2,i3=0,1,0
       if (i== 'y'):
         i1,i2,i3=0,0,1
      j= request.form["ob"]
      if (j== 'n'):
        j1,j2,j3=1,0,0
      if (== 'nis'):
        j1,j2,j3=0,1,0
      if (j== 'y'):
        j1,j2,j3=0,0,1
       k= request.form["dp"]
       if(k== 'n'):
         k1,k2,k3=1,0,0
       if (k== 'nis'):
         k1,k2,k3=0,1,0
        if (k== 'y'):
          k1,k2,k3=0,0,1
         l= request.form["ts"]
         if (l== 'n'):
           l1,l2,l3=1,0,0
          if (l== 'nis'):
             l1,l2,l3=0,1,0
          if (l== 'y'):
            l1,l2,l3=0,0,1
         m= request.form{"stv"}
         if (m== 'n'):
           m1,m2,m3=1,0,0
         if (m== 'nis'):
           m1,m2,m3=0,1,0
          if(m== 'y'):
            m1,m2,m3=0,0,1
           n= request.form["smv"]
           if (n== 'n'):
             n1,n2,n3=0,1,0
            if (n== 'nis'):
              n1,n2,n3=0,1,0
            if(n== 'y'):
              n1,n2,n3=0,0,1 
          o= request.form["contract"]
          if (o== 'mtm'):
            o1,o2,o3=1,0,0
          if (o== 'oyr'):
            o1,o2,o3=0,1,0
           if (o== 'tyre'):
             o1,o2,o3=0,1,0
          p= request.form["pmt"]
          if (p== 'ec'):
            p1,p2,p3,p4=1,0,0,0
            if (p== 'mail'):
              p1,p2,p3,p4=0,1,0,0
            if (p== 'bt'):
              p1,p2,p3,p4=0,0,1,0
          q= request.form["plb"]
          if (q== 'n'):
            q=0
            if (q== 'y'):
              q=1
          r= request.form["mcharges"]
          s= request.form["tcharges"]
          t=[[int(g1),int(g2),int(g3),int(h1),int(h2),int(h3),int(i1),int(i2),int(i3),int(j1)]]
          print(t)
          x= model.predict(t)
          print(x[0])
          if ([[0]]<=0.5):
            y="No"
            return render_template("predno.html",z=y)
            if ([[0]]>=0.5):
              y="yes"
              return render_template("predyes.html", z=y)

from google.colab import drive
drive.mount('/content/drive')